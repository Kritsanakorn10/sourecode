clc; clear; close all;

%% โหลดข้อมูลจากไฟล์ Excel
filename = '100perdata.xlsx';
data = readtable(filename);

%% สร้าง Lag Features และ Moving Average Features
data.Rainfall_Lag1 = [NaN; data.Rainfall(1:end-1)];
data.Rainfall_Lag2 = [NaN; NaN; data.Rainfall(1:end-2)];
data.Rainfall_Lag3 = [NaN; NaN; NaN; data.Rainfall(1:end-3)];

data.Rainfall_MA3 = movmean(data.Rainfall, [2 0], 'omitnan');
data.Rainfall_MA5 = movmean(data.Rainfall, [4 0], 'omitnan');
data.Rainfall_MA7 = movmean(data.Rainfall, [6 0], 'omitnan');

% ลบแถวที่มีค่า NaN
data = rmmissing(data);

%% แยก Features และ Target
feature_cols = {'MaxAirPressure', 'MinAirPressure', 'MaxTemp', 'MinTemp', ...
                'MaxHumidity', 'MinHumidity', 'Evaporation', 'WindSpeed', ...
                'Rainfall_Lag1', 'Rainfall_Lag2', 'Rainfall_Lag3', ...
                'Rainfall_MA3', 'Rainfall_MA5', 'Rainfall_MA7'};

X = data{:, feature_cols}; % Features
y = data.Rainfall;         % Target

%% Normalization (Min-Max Scaling)
X_min = min(X);
X_max = max(X);
X_scaled = (X - X_min) ./ (X_max - X_min);

y_min = min(y);
y_max = max(y);
y_scaled = (y - y_min) ./ (y_max - y_min);

%% แบ่งข้อมูลเป็น Train และ Test
train_size = round(0.8 * size(X_scaled, 1));
X_train = X_scaled(1:train_size, :);
X_test = X_scaled(train_size+1:end, :);
y_train = y_scaled(1:train_size, :);
y_test = y_scaled(train_size+1:end, :);

X_train = arrayfun(@(i) X_train(i, :)', 1:size(X_train, 1), 'UniformOutput', false);
X_test = arrayfun(@(i) X_test(i, :)', 1:size(X_test, 1), 'UniformOutput', false);

y_train = y_train(~isnan(y_train));
y_test = y_test(~isnan(y_test));

%% สร้างโมเดล LSTM
numFeatures = size(X_train{1}, 1);
numHiddenUnits = 100;
numResponses = 1;

layers = [ ...
    sequenceInputLayer(numFeatures)
    lstmLayer(numHiddenUnits, 'OutputMode', 'last')
    dropoutLayer(0.2)
    fullyConnectedLayer(numResponses)
    reluLayer
    regressionLayer];

options = trainingOptions('adam', ...
    'MaxEpochs', 50, ...
    'MiniBatchSize', 64, ...
    'Shuffle', 'never', ...
    'Verbose', 0);

net = trainNetwork(X_train, y_train, layers, options);

%% ทำนายผล
y_test_pred = predict(net, X_test);
y_test_pred = y_test_pred * (y_max - y_min) + y_min;
y_test = y_test * (y_max - y_min) + y_min;

%% สร้าง Confusion Matrix และ Metrics แบบ TP, FP, TN, FN
categorizeRainfall = @(x) (x < 0.1) * 1 + ...
                           (x >= 0.1 & x <= 10) * 2 + ...
                           (x > 10 & x <= 35) * 3 + ...
                           (x > 35 & x <= 90) * 4 + ...
                           (x > 90) * 5;

actual_classes = arrayfun(categorizeRainfall, y_test);
pred_classes = arrayfun(categorizeRainfall, y_test_pred);

C = confusionmat(actual_classes, pred_classes);

fprintf('\nConfusion Matrix:\n');
disp(C);

num_classes = size(C, 1);
accuracy = sum(diag(C)) / sum(C(:));

precision = zeros(num_classes,1);
recall = zeros(num_classes,1);
f1_score = zeros(num_classes,1);

labels = {'ฝนวัดจำนวนไม่ได้', 'ฝนตกน้อย', 'ฝนตกปานกลาง', 'ฝนตกหนัก', 'ฝนตกหนักมาก'};

for i = 1:num_classes
    TP = C(i,i);
    FP = sum(C(:,i)) - TP;
    FN = sum(C(i,:)) - TP;
    TN = sum(C(:)) - TP - FP - FN;

    precision(i) = TP / (TP + FP + eps);
    recall(i) = TP / (TP + FN + eps);
    f1_score(i) = 2 * (precision(i) * recall(i)) / (precision(i) + recall(i) + eps);
end

fprintf('\nModel Performance Metrics:\n');
fprintf('Accuracy: %.4f\n', accuracy);
for i = 1:length(labels)
    fprintf('%s - Precision: %.4f, Recall: %.4f, F1-Score: %.4f\n', ...
        labels{i}, precision(i), recall(i), f1_score(i));
end