clc; clear; close all;

%% โหลดข้อมูลจากไฟล์ Excel
filename = '100perdata.xlsx';
data = readtable(filename);

%% สร้าง Lag Features และ Moving Average Features
data.Rainfall_Lag1 = [NaN; data.Rainfall(1:end-1)];
data.Rainfall_Lag2 = [NaN; NaN; data.Rainfall(1:end-2)];
data.Rainfall_Lag3 = [NaN; NaN; NaN; data.Rainfall(1:end-3)];

data.Rainfall_MA3 = movmean(data.Rainfall, [2 0], 'omitnan');
data.Rainfall_MA5 = movmean(data.Rainfall, [4 0], 'omitnan');
data.Rainfall_MA7 = movmean(data.Rainfall, [6 0], 'omitnan');

% ลบแถวที่มีค่า NaN
data = rmmissing(data);

%% แยก Features และ Target
feature_cols = {'MaxAirPressure', 'MinAirPressure', 'MaxTemp', 'MinTemp', ...
                'MaxHumidity', 'MinHumidity', 'Evaporation', 'WindSpeed', ...
                'Rainfall_Lag1', 'Rainfall_Lag2', 'Rainfall_Lag3', ...
                'Rainfall_MA3', 'Rainfall_MA5', 'Rainfall_MA7'};

X = data{:, feature_cols}; % Features
y = data.Rainfall;         % Target

%% Normalization (Min-Max Scaling)
X_min = min(X);
X_max = max(X);
X_scaled = (X - X_min) ./ (X_max - X_min);

y_min = min(y);
y_max = max(y);
y_scaled = (y - y_min) ./ (y_max - y_min);

%% ตั้งค่า K-Fold Time Series
K = 5;
n = size(X_scaled,1);
fold_size = floor(n / K);

accuracy_scores = zeros(K,1);
precision_scores = zeros(K,1);
recall_scores = zeros(K,1);
f1_scores = zeros(K,1);

for k = 1:K
    fprintf('Fold %d:', k);

    % แบ่งข้อมูลตามลำดับเวลา
    test_idx = (1 + (k-1) * fold_size) : (k * fold_size);
    
    % ป้องกันไม่ให้ Test Set เกินขนาดของข้อมูล
    if max(test_idx) > n
        test_idx = test_idx(1):n;
    end
    
    % ปรับ Train-Set ให้ไม่ว่าง
    if k == 1
        train_idx = 1:fold_size; % ให้ Fold 1 มีข้อมูลเทรน
    else
        train_idx = 1 : ((k-1) * fold_size); % ใช้ข้อมูลก่อนหน้าเสมอ
    end

    % แยกข้อมูล Training และ Testing
    X_train = X_scaled(train_idx, :);
    y_train = y_scaled(train_idx);
    X_test = X_scaled(test_idx, :);
    y_test = y_scaled(test_idx);

    % แปลงข้อมูลให้ LSTM ใช้ได้
    X_train = arrayfun(@(i) X_train(i, :)', 1:size(X_train,1), 'UniformOutput', false);
    X_test = arrayfun(@(i) X_test(i, :)', 1:size(X_test,1), 'UniformOutput', false);

    % สร้างโมเดล LSTM
    layers = [ ...
        sequenceInputLayer(size(X_train{1},1))
        lstmLayer(100, 'OutputMode', 'last')
        dropoutLayer(0.2)
        fullyConnectedLayer(1)
        reluLayer
        regressionLayer];

    options = trainingOptions('adam', ...
        'MaxEpochs', 50, ...
        'MiniBatchSize', 64, ...
        'Shuffle', 'never', ...
        'Verbose', 0);

    % เทรนโมเดล LSTM
    net = trainNetwork(X_train, y_train, layers, options);

    % ทำนายผล
    y_test_pred = predict(net, X_test);
    y_test_pred = y_test_pred * (y_max - y_min) + y_min;
    y_test = y_test * (y_max - y_min) + y_min;

    % กำหนดเกณฑ์ชัดเจนว่าฝนตกหรือไม่ (0.1 mm)
    threshold = 0.1;

    % คำนวณ Metrics
    TP = sum((y_test_pred >= threshold) & (y_test >= threshold));
    FP = sum((y_test_pred >= threshold) & (y_test < threshold));
    TN = sum((y_test_pred < threshold) & (y_test < threshold));
    FN = sum((y_test_pred < threshold) & (y_test >= threshold));

    accuracy_scores(k) = (TP + TN) / (TP + TN + FP + FN);
    precision_scores(k) = TP / (TP + FP + eps);
    recall_scores(k) = TP / (TP + FN + eps);
    f1_scores(k) = 2 * (precision_scores(k) * recall_scores(k)) / (precision_scores(k) + recall_scores(k) + eps);

    fprintf(' Accuracy: %.4f, Precision: %.4f, Recall: %.4f, F1-Score: %.4f\n', ...
        accuracy_scores(k), precision_scores(k), recall_scores(k), f1_scores(k));
end

%% แสดงผลเฉลี่ย K-Fold
fprintf('\nK-Fold Cross Validation Results:\n');
fprintf('Mean Accuracy: %.4f ± %.4f\n', mean(accuracy_scores), std(accuracy_scores));
fprintf('Mean Precision: %.4f ± %.4f\n', mean(precision_scores), std(precision_scores));
fprintf('Mean Recall: %.4f ± %.4f\n', mean(recall_scores), std(recall_scores));
fprintf('Mean F1-Score: %.4f ± %.4f\n', mean(f1_scores), std(f1_scores));
